ll powMod(ll a, ll b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = (res * a) % MOD;
        a = (a * a) % MOD;
        b >>= 1;
    }
    return res;
}

// Stars and Bars Problem (Euler's Distribution)
// N candies and M children. How many ways to distribute all N candies 
// to M children such that each child gets at least one candy?
// Number of ways: C(N-1, M-1)
// Fast computation of C(n,k)

typedef long long ll;
const int MAXN = 2000005;
const int MOD = 1000000007;

ll fact[MAXN], inv_fact[MAXN];

ll powMod(ll a, ll b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = (res * a) % MOD;
        a = (a * a) % MOD;
        b >>= 1;
    }
    return res;
}

void pre_calculator() {
    fact[0] = 1;
    for (int i = 1; i < MAXN; i++) {
        fact[i] = (fact[i - 1] * i) % MOD;
    }

    inv_fact[MAXN - 1] = powMod(fact[MAXN - 1], MOD - 2);
    for (int i = MAXN - 2; i >= 0; i--) {
        inv_fact[i] = (inv_fact[i + 1] * (i + 1)) % MOD;
    }
}

ll C(ll n, ll k) {
    if (k > n || k < 0) return 0;
    return (((fact[n] * inv_fact[k]) % MOD) * inv_fact[n - k]) % MOD;
}