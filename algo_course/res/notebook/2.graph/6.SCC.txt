// Strongly Connected Components using Tarjan's algorithm
int low[100005], num[100005], cntDfs = 0, ans = 0;
bool is_deleted[100005];
int root[100005];
stack<int> store;

void dfs(int u)
{
    low[u] = num[u] = ++cntDfs;
    store.push(u);
    for (int v : adj[u])
    {
        if (is_deleted[v])
            continue;
        if (num[v] > 0)
            low[u] = min(low[u], num[v]);
        else
        {
            dfs(v);
            low[u] = min(low[u], low[v]);
        }
    }
    if (low[u] == num[u])
    {
        ans++; // Count number of SCCs
        while (true)
        {
            int v = store.top();
            store.pop();
            is_deleted[v] = true;
            root[v] = u; // Store root if needed
            if (v == u)
                break;
        }
    }
}