bool visited[100005];
vector<int> adj[100005];
int num[100005], low[100005];
int timeDFS = 0;
vector<pair<int, int>> bridges;
set<int> joints;

void dfs_bridges(int u, int father)
{
    num[u] = low[u] = ++timeDFS;
    for (int v : adj[u])
    {
        if (v == father)
            continue;
        else if (num[v] > 0)
            low[u] = min(low[u], num[v]);
        else
        {
            dfs_bridges(v, u);
            low[u] = min(low[u], low[v]);
            if (low[v] > num[u])
                bridges.emplace_back(u, v);
        }
    }
}

// Find articulation points
void dfs_joints(int u, int father)
{
    num[u] = low[u] = ++timeDFS;
    int children = 0;
    for (int v : adj[u])
    {
        if (v == father)
            continue;
        else if (num[v] > 0)
            low[u] = min(low[u], num[v]);
        else
        {
            dfs_joints(v, u);
            children++;
            low[u] = min(low[u], low[v]);
            if (father == -1 && children >= 2)
                joints.insert(u);
            if (father != -1 && low[v] >= num[u])
                joints.insert(u);
        }
    }
}