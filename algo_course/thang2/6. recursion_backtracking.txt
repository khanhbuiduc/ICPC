
recursion
1. phải định nghĩa đc hàm đệ quy đó có mục đích gì
2. xét kết quả đệ quy trong trường hợp biên("điểm dừng")
3. tìm ra bài toán đệ quy hiện tại bằng bài toán đệ quy mà ta gọi đến( giả sử bài toán đệ quy mà ta gọi đến chính sác rồi)

---------
lũy thừa:
n-> tính 2^N;
ta gọi hàm power2(N) với ý nghĩa tính giá trị 2^N
nếu n=0 return 1
else
    return power2(N-1)*2;
---------
tìm max
a=[5,1,2,3,4,5,3,5]

thiết kế hàm tìm Findmax với ý nghĩa: findMax(n) là số có giá trị lớn nhất trong N số đầu tiên.
findMax(N)
    Nếu N=1 return a[i]
    else
        return max(findmax(N-1),N)
---------------
in sao
cho số N, hãy in ra N dòng sao, dòng thứ i in ra i ngôi sao
N=5;
*
**
***
****
*****
thiết kế hàm printStar với ý nghĩa:printStar(N) in ra N-1 dòng sao trc, sau đó in ra N ngôi sao
printStar(N)
    nếu N=0 return ;
    printStar(N-1)
    for i:0->n 
        in "* "
    in xuống dòng
-----------------
create string

aabac: dãy count[]: đếm số lượng từng chữ cái

tạo hàm CreateString với ý nghía:CreateString(position) xét vị trí position
for char in count
    nếu count[char]>0; st[position]=char; count[char]--;
    nếu position=n-1 thì cin ra st, reset string
    nếu không xét vị trí tiếp theo
    count[c]++;
------------------
liệt kê hoán vị
1,2,3 => 1,2,3; 1,3,2;...
tạo hàm permutaion với ý nghĩa: permutaion(position) xét vị trí position
đặt used[]: per[i] đã đc sử dụng: true ngược lại thì false
for i: 0->n-1// các lựa chọn
    nếu used[i]==false
        per[pos]=a[i]
        used[i]=true;
        nếu pos=n-1 thì in đáp án
        else
            backtrack(pos+1)
        used[i]=false
O(n*n)
-----------------
tập hợp:
1,2,3=> [],[1],[2],[3],...[1,2,3]
gọi dãy choose[]:choose[i]=1 nếu vị trí i đc chọn;
 tạo hàm backtrack với ý nghĩa: backtrack(position) xét vị trí position
for i: 0->1
    nếu i=1
        sub.pushback(số ở vị trí i)
    nếu pos=n-1 in ra
    else
        backtrack(pos+1)