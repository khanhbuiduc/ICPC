chia để trị: divide and conquer

chia để trị là một lớp bài toán được giải bằng cách sử dụng đệ quy( lớp bài toán chia để trị là lớp bài toán con của những bài toán đệ quy)
những bài toán chia để trị là những bài toán mà ta cần giải bài toán hiện tại dựa vào lời giải của bài toán con nhỏ hơn có cùng tính chất với bài toán hiện tại

để giải bài toán chia để trị ta cần định nghĩa bài toán dựa trên 4 bước:
    bước 1: định nghĩa bài toán hiện tại
    bước 2: giải bài toán với trường hợp nhỏ nhất
    bước 3: xác định đáp án bài toán
    bước 4: tìm cách giải bài toán hiện tại dựa trên bài toán con của bài toán đó

ví dụ: tính tổng 1->N
    b1: sum(N) là bài toán nhằm mục đích tính tổng 1->n
    b2: n=0 trả về 0;
    b3: đáp án sum(N)
    b4: sum(N)=sum(N-1)+N

thuật toán sử dụng chia để trị:
    thuật toán merge sort
    ctdl: heap,binary_search_tree
    binary search


------------------
exponation: tính a^b mod 10^9 + 7
phép cộng: (a + b) % M=(a % M + b % M) % M 
phép trừ: (a - M) % M = (a % M - b % M + M) % M
phép nhân: (a * b) % M = ((a % M) * (B % M)) % M 
phép chia: sai a / b mod M = a * (b ^ (M-2)) mod M

B1: gọi hàm pow(x, n) là hàm tính x^n mod M
B2: n=0=> pow(x, n)=1
B3: ans=power(x, n)
B4: n lẻ power(x, n) = (power(x, n-1) * x) % M
    n là chẵn 
        ret= power(x, n) 
    return = (ret*ret) % M
---------------------------
WC1:cho n và dãy a; tính a[1]+...a[n-1]/a[i]
    ý tưởng ngây thơ
        for i: 1->n
            ans=1
            for j: 1->n
                nếu i!=j thì ans=mulMod(ans,a[j])
    ý tưởng đúng
        đặt prefix i : 1 -> n  prefix[ i ]=prefix[i - 1] * a[ i ]
        đặt suffix i : n -> 1  suffix[ i ]=suffix[i + 1] * a[ i ]
        a[i] tính prefix[i - 1] *  suffix[i + 1]
        prefix[i - 1]<=68 tỉ
        prefix[i - 1]*prefix[i - 1]> long long
lưu ý viết ll a = (int)b * (int)c % mod có thể dẫn tràn số
int * int bị tràn trước khi gán vào long long
cách viết đúng ll a= (ll)b*c%mod
------------------------
SC4
cho 3 số nguyên x,N,M: tính (1 + x + x^2 + x^3 + ... x^N) mod M
ta có x * S - S = x^(n + 1) - 1;
// thử xem dùng nghịch đảo modul có được không

cách khác:
N lẻ
S= 1 + x +.. x^9
S=(1 + x + x^2 + x^3 + x^4) + x^5*((1 + x + x^2 + x^3 + x^4))
S(9) = S(4) * (x^5 + 1)
N chẵn
S(10) = S(9) * x^10;

B1: gọi hàm cal(x,N) tính ...
B2: N=0 cal(x,0)=1
B3: calc(x,N)
B4: 
    N chẵn
        cal(x,N)=cal(x, N - 1) + power( x, N )
    N lẻ
        ret = calc(x,N/2)
        ret = ret * (1 + power(x, N / 2 + 1) % M) % M 