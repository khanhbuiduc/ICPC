đồ thị?
đồ thị là một tập hợp cách đỉnh và các cạnh, trong đó các cạnh biểu thị mối liên quan giữa các đỉnh với nhau
1 đỉnh đc coi là 1 trạng thái của 1  sự vật sự việc nào đó

một số khái niệm căn bản trong đồ thị

1. đỉnh: 1 sự vật/ sự việc/ tháng thái
2. cạnh: biểu thị mối liên quan giữa 2 đỉnh với nhau, cạnh có hướng và cạnh vô hướng
3. trọng số của 1 cạnh: 1 giá trị đc gán trên 1 cạnh biểu thị cho 1 giá trị nào đó trong bài toán
4. đường đi: một danh sách các đỉnh x1,x2,x3,..xk trong đố 2 đỉnh xi, xi+1 sẽ kề nhau (có 1 cạnh nôí từ xi -> xi +1)
----------------------------------------------------------
thuật toán DFS:

cho 1 đồ thị G(V,E) cho 1 đỉnh xuất phát bất kì hỏi có bảo nhiêu đỉnh có thể đến đc nếu ta xuất phát từ đỉnh  start  

giả sử ta đang đứng tại đỉnh u, xét những lựa  chọn v có thể đi đến được. nếu v chưa đc thăm thì hãy đến đỉnh  v
ta sử dụng 1 bảng visited[u] với ý nghĩa nếu visited[u] =true thì u đã đc ghé thăm, = false nếu chưa được

để lưu trữ đồ thị ta sẽ sử dụng ctdl đc gọi là danh sách kề: 
1 danh sách kề: adj[u] sẽ chứa các đỉnh v mà từ u có thể đi trực tiếp sang v 

biểu diễn lưu trữ trong code:
vector<int> adj[100005];// nhập adj[u].push_back(v);
bool visited[100005];

duyệt cách vị trí có thể đi:
dfs(u): di chuyển từ vị trí u
    đánh dấu u đã thăm;
    for i: 0->size of adj[u]
        v= adj[u][i]
        if v chưa thăm
            dfs(v);
----------------------------------------------------------------------
couting room

gọi visited[i][j] là đỉnh đã đc thăm chưa
Dx[4]={0,0,1,-1}
Dy[4]={1,-1,0 ,0}

(x,y)

dfs(x,y)
    visited[x][y]==true;
    for i: 0->3
        (nx,ny)=(x+dx[i], y+dy[i])
        nếu 0<=nx<n; 0<=ny<m; a[nx][ny]=="."; visited[nx][ny]==false
            dfs(nx,ny)
main()
    for i:0->n-1
        for j:0->m-1
            nếu  a[i][j]=='.' và chưa thăm a[i][j]
                ans++;
                dfs(i,j);
----------------------------------------------------------------
kiểm tra mê cung có thỏa mãn không

một mê cung thỏa mãn khi và chỉ khi có duy nhất 1 nối vào và 1 nối ra, trong đó trong đó nối vào và nối ra phải nằm trên đường biên và có đường đi từ lỗi vào và rời khỏi lối ra
2 đỉnh (x,y) và (x',y') kề nhau nếu chúng chung cạnh 
hỏi mê cung có thỏa mãn hay không
##.##
##..#
#..##
##.##
------------------------------------------------------------------
Round trip II

Đồ thị DAG:

Đồ thị DAG là đồ thị có hướng và không tồn tại 1 chu trình đơn

1 chu trình là 1 danh sách các điểm s->s1->s2->...sn->s

gọi bảng trace[u] với ý nghĩa:
trace[u] là đỉnh v kề trc đỉnh u trong quá trình duyệt DFS

gọi bảng state[u] với ý nghĩa:
state[u] = 0 đỉnh u đã được thăm
state[u] = 1 đỉnh u đã được thăm và chưa kết luận đc u không có chu trình
state[u] = 2 đỉnh u đã đc thăm và ta kết luận nếu đi vào u thì sẽ không tìm ra chu trình

dfs(u)
    state[u]=1
    for mọi v kề u
        nếu state[v]=0;
            trace[v]=u
            dfs(v)
        nếu state[v]==1
            truy vết đường đi và dừng chương trình
    state[u]=2


--------------------------------------------------------------------
mail delivery:

bậc của đồ thị
bậc của đồ thị (degree) là một giá trị đại diện cho số lượng đỉnh kề với đỉnh đang xét

định lý:

một đồ thị G(V,E) sẽ tồn tại đường đi euler nếu bậc của tất cả các đỉnh là số chẵn
dfs(u)
    ans.push_back(u)
    for v kề u
        xóa v khỏi danh sách adj[u]
        xóa u khỏi danh sách adj[u]
        dfs(v)

cài đặt adj[u] và adj[v] alf 2 sét
đọc cạnh u-v
gọi adj[u].inset(v) và adj(v).inset(u)

------------------------------------------------------

SC5

trong 1 căn phòng thí nhiệm, ta có thể xem căn phòng này như 1 hình chữ nhật gồm N hàng, M cột
trong đó ô (i,j) có thể rỗng ('.'), ô tường('#'), ô có hồ nc('S') và ô có độc ('1', '9')
ban đầu nhà khoa học học ở ô (1,1) và thoát hiểm ở ô (N,M)
nếu nhà khoa học bước vào ô có độc, độc trong người tăng 1 lượng bằng độc nơi đó.
nếu nhà khoa học bước vào hồ thì toàn bộ độc đc rửa sạch
ô start và end không có độc, lượng độc >=10 thì mất mạng
hỏi: nhà khoa học có thoát ra đc căn phòng hay k

n=3, m=6
.#####
.1234S
#####.

ta tổ chức đồ thị như sau:
1 đỉnh của đồ thị sẽ chứa 3 thông tin: {x,y,pos} với ý nghĩa nhà khoa học đứng tại ô (x,y) có lượng độc trong người là pois
nhà khoa học sẽ xuất phát tại đỉnh (1,1,0)

gọi visited[x][y][pos] true nếu đã đc thăm và false khi ngược lại
đỉnh xuất phát: (1,1,0)
đích đến (n,m,pois) pois<10

dfs(x,y,pois)
    visited[x][y][pois]=true;
    for mọi (nx,ny) kề với (x,y)
        nếu !(0<nx<=n) || !(0<ny<=m)  || (nx,ny) == '#'
            continue;// tạo bao tường thì chỉ sét '#'
        nếu (nx,ny) is digit 
            pois + a[nx,ny]>=10
            continue
        nếu (nx,ny)=='S'    pois=0
        nếu (nx,ny) is digit pois += a[nx,ny]
        nếu visited[nx][ny][pois]==false
            dfs(nx,ny,nextpois);

-------------------------------------------------------------------------
buổi 5:DFS

1 đồ thị G(V,E) cho 1 đỉnh xuất phát gọi là start. hỏi độ dài đường đi ngắn nhất từ start đến mọi đỉnh còn lại là bao nhiêu

1 đường đi ta sẽ tính độ dài bằng số cạnh trên đường đi đó

gọi dist[u] là dộ dài đường đi ngắn nhất từ start -> u
khởi tạo dist[u] = -1

ta chuẩn bị 1 hàng đợi queue với ý nghĩa: lưu trữ những đỉnh này trong quá trình duyệt

lưu start vào hàng đợi, gán dist[start]=0;

với đỉnh u trong queue ta sét mọi v kề với u
    nếu dist[v] == -1
        dist[v] = dist[u] + 1
        đưa v vào queue

xuất các dist[u]

khởi tạo các dist[u] = -1
dist [start] = 0
đưa start vào Q
while Q != rỗng:
 lấy u ra khỏi Q
 duyệt vọi v kề u
    nếu dist[v] == -1
        dist[v] = dist[u] + 1
        đưa v vào Q
độ phức tạp: O( V+E )
-----------------------==--------------------------
MOVE:

cho 2 dãy số nguyên a,b. ban đầu có 1 dãy giá trị s.
ta đc phép thực hiện nhiều thao tác như sau:
    - chọn 1 vị trí i, lấy S = (S * a[i] + b[i]) % M 
hỏi sau tối thiểu bao nhiêu phép tính thì S sẽ trở về 0 hoặc đưa ra kết luận là k thể làm.

5 2 1
2 1
3 1

khởi tạo dist[i] = -1 với mọi i: 0 -> M - 1

đưa S vào hàng đợi
dist[S] = 0
lấy đỉnh u  ra khỏi hàng đợi
    duyệt mọi v kề u:
    for i: i->n
        v = (u * a[i] + b[i]) % M
        nếu dist[v] = -1
            dist[v] = dist[u] + 1
            đưa v vào hàng đợi 
            