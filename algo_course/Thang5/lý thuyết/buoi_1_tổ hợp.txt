phép toán trong tổ hợp:
    - phép cộng: 
    công việc P, có k phương án độc lập hoàn thành công việc P
        - phương án 1: p1 cách.
        - phương án 2: p2 cách.
        - phương án k: pk cách.
    tổng số phương án: p1+p2+..pk
    - phép nhân:
    công việc P, có k giai đoạn độc lập để hoàn thành công việc P
        - giai đoạn 1: p1 cách.
        - giai đoạn 2: p2 cách.
        - giai đoạn k: pk cách.
    tổng số giai đoạn: p1 * p2 * .. * pk
///////////////////////////////////////////
Ball in Berland:

Có N bạn trai đánh số từ 1 -> N, có M bạn gái đánh số từ 1 -> M
Có K cặp sẵn sàng nhảy với nhau, mỗi cặp gồm 1 bạn trai và 1 bạn gái
Nhà trường sẽ chọn ra 2 cặp để biểu diễn văn nghệ, biết rằng nếu đã chọn bạn trai trong cặp này thì cặp kia sẽ không có bạn này nữa. Tương tự với bạn gái
Hòi có bao nhiêu cách chọn ??????

Ví du:

N = 5, M = 6, K = 5

1 1 X
3 4
3 1
2 5
5 4 X

Thuật ngây thơ:

for i: 1 -> n
for j: 1 -> i - 1
neu a[i].boy != a[j].boy va a[i].girl != a[j].girl:
ans++

O(N^2)

Thuật chuẩn:

Gọi countBoys[x]: số lượng cặp trước đó có bạn trai = x

Gọi countGirls[x]: số lượng cặp trước đó bạn gái = x

for i: 1 -> k
    số lượng j không thỏa = countBoys[a[i].boy] + countGirls[a[i].girl]
    === > số lượng j thỏa = (i - 1) - số lượng j không thỏa
    ans += số lượng j thỏa
    countBoys[a[i].boy]++
    countGirls[a[i].girl]++ 
//-------------------------------------------------------------
Hoán vị

Cho một số tự nhiên N, xét tất cả các số 1, 2, 3, .... , N. Hỏi có bao nhiêu dãy số gồm N số này, biết rằng các số trong dãy phải khác nhau.

N = 3

[1, 2, 3]
[1, 3, 2]
[2, 1,3]
[2, 3, 1]
[3, 1,2]
[3, 2, 1]

==== > 6 dãy

Việc xây dựng day số trên là một công việc gồm N giai đoạn có hình ảnh: [?, ?, ?, ..... , ?]

Vị trí 1: Có N cách điền {1, 2, 3, .... , N}
Vị trí 2: Có N - 1 cách điền {1, 2, 3, .... , N} \ {p[1]}
Vị trí 3: Có N - 2 cách điền {1, 2, 3, .... , N} \ {p[1], p[2]}

Vị trí N: Có 1 cách điền

===== > Số cách tạo ra hoán vị: N x (N - 1) x (N - 2) x . .... x 2 x 1 

Ta ký hiệu 1 x 2 x 3 x .... x N = N! ( N giai thừa)

-----------------------------------------------------------------
Chỉnh hợp:

Xét số tự nhiên N và xét các số {1, 2, 3, .... , N}. Cho một so nguyen dương K, hoi co bao nhieu day so gom K so khac nhau duợc chọn từ N so trên ??

Ví dụ:

N = 4, K= 3

kết quả  chỉnh hợp: A(k,n) = n!/(n-k)!
--------------------------------------------------------------------
Tổ hợp:

Xet số tự nhien N va xet cac so {1, 2, 3, .... , N}. Cho một so nguyen duong K, hoi co bao nhieu tap hop gom K so khac nhau duoc chon tu N so tren ??

C(k,n) = n! / [k! * (n-k)!]

----------------------------------------------------------------------
SPC2 (Spring Contest 2020)

Cho một dãy số a gồm N số nguyên dương a1, a2, .... , aN.

Xét tất cả các hoán vị của dãy số a, với mỗi hoán vị gồm các vị trí [x1, x2, .... , xN], ta tính tổng các | a[xi] - a[x[i - 1]]|

Ta hay tinh trung bình cong cua tat ca cac tổng va rut gon gia trị nay duoi hình thuc la mot phan so toi gian.

Hỏi giá trị của tử và mẫu là bao nhiêu ??????

Ví dụ:

a = [2, 3, 5]
[2, 3, 5] --- > |2 - 0| + |3 - 2| + |5 - 3| = 5
[2, 5, 3] --- > |2 - 0| + |5 - 2| + |3 - 5| = 7
[3, 2, 5]---- > |3 - 0| + |2 - 3| + |5 - 2| = 7
[3, 5, 2]---- > |3 - 0| + |5 - 3| + |2 - 5| = 8
[5, 2, 3]---- > |5 - 0| + |2 - 5| + |3 - 2| = 9
[5, 3, 2]---- > |5 - 0| + |3 - 5| + |2 - 3| = 8

sum = tổng các pt ai
số hoán vị mà ai đứng đầu tiên.
    ai, ?, ?, ?..., ?
    có n-1 vị trí ?
        => s1 = (a1 + ... + an) * ((n - 1)!)
số hoàn vị mà ta có a[i] và a[j] đứng cạnh nhau;
    ?, ?, ?,...a[i], a[j], ..., ?, ?
    có n-2 vị trí ? và 1 vị trí của cặp a[i], a[j]
        => s2= (n-1)! * 2 * tổng mọi |a[i] - a[j]|

tử = s1 + s2 
mẫu = n!

tử/mẫu = ((a1 + ... + an) + 2 * tổng mọi |a[i] - a[j]| ) / n 

------------
tính tổng mọi |a[i] - a[j]|

phá trị tuyệt đối = cách sort a tăng dần.
for i: 1->n
    for j: 1->i-1
        sum += a[i] + a[j] 
----
tự phân tích:
    1,2,3,4,5
    for i: 1->n
        s += (i-1) * a[i] - preSum[i-1]
tạo bảng preSum:
--------------------------
solution

vị trí i: a[i] đóng góp i-1 lần
vị trí sau i: - a[i] đóng góp n-i lần
=> a[i] * (2i - n -1)

for i: 1 -> N
sum += (2i - 1 - N) x ai

Tóm tat lại:

Bước 1:Sap xep day a tang dan

Bước 2: Tinh tổng a1 + a2 + .... + aN

Bước 3: Tinh tổng ai x (2i - N - 1)

Buớc 4: Rut gon phan so cho tu va mau
------------------------------------------
Pizza

Cho đa giac N đinh, ve cac duong cheo. Hoi so phan ma duoc chia ra tu da giac nay.

Nhận xét: N <- 10^18

Nhận xét:
 
Khi co mot đuong cheo moi, thì neu duong cheo moi cat K duong cheo cu thi se sinh ra them K + 1 hình mới.
    => 1 đường chéo cất K đường chéo cũ ==== > có K giao điểm ==== > sinh ra K + 1 hình mới
    => đếm số lượng hình bang việc đếm số lượng giao điểm + số lượng đường chéo + 1
        cứ 2 cạnh ta có 1 giao điểm.
        với mỗi đỉnh ta có thể nối tới  n-2 đỉnh còn lại => n-3 đường chéo. nhưng bị lặp 2 lần
        
        - Số lượng giao điểm : C(4, N)
        - Số lượng đường chéo: N * (N - 3) / 2

Công thức tổng quát: N * (N - 3) / 2 + C(4, N) + 1
-----------
n<=10^18

M = 987654321

tính:  C(4, N)

phép MOD:
    Phép cộng:  (a + b) % M = (a % M + b % M) % M
    Phép trừ:   (a - b) % M = (a % M - b % M + M) % M
    phép nhân:  (a * b) % M = ([a % M] * [b % M]) % M

-----------------
tự phân tích:
C(4, N) =  n! / ( k! * (n-k)! ) = n * (n-1) * (n-2) * (n-3) / 24
24 = 2^3 * 3
4 số liên tiếp chắc chắn có 1 số chia hết cho 2 và 1 số chia hết cho 4, 1 số chia hết cho 3 => chỉ cần dùng phép mod thông thường 

n * (N-3) /2 chắc chẵn chia hết cho 2 vì 1 số chẵn, 1 số lẻ
------------------
bài trong solution.
N * (N - 3) / 2

Kiểm tra nếu N là số chẵn thì lãy N = N / 2, sau đó nhân với (N - 3)

Tạo một bảng check[x] với ý nghĩa: check[x] == true: số x đã được chia khi tinh N * (N - 1) * (N - 2) * (N - 3)
-----------------------------------------------------------
Sum of Divisiors

Cho số nguyên dương N, gọi hàm f(i) là hàm tính tổng các ước của i.

Hãy tính f(1) + f(2) + ... + f(N)

Ví dụ:

N = 4

f(1) = 1
f(2) = 3
f(3) = 4
f(4) = 7

f(1) + f(2) + f(3) + f(4)=15

1 <= n <= 10^12

=> độ phức tạp nhỏ hơn O(căn n)
----------

N = a * b với a<b thì a < sqr(n)

vd: n=100
1: đóng góp trong tổng 100 lần
2: ... . . . . .  . . . 50 lần
3: .................... 33 lần
....
10: ................... 10 lần

case 1: số < sqr(n)
for(int i=1;i*i<n;i++)
    ans += i* (100/i);
------
trường hợp còn lại.(tmp = 100/sqr(100) - 1 = 9)

chỉ đóng góp 1 lần: 51 ->  100:
    => n/2 + 1 tới n
đóng góp 2 lần: 34 -> 50
    => n/3 + 1 tới n/2
.....
đóng góp 9 lần: 
    => n/9 + 1 tới n/8

=> ta có công thức.

for(int i = 1,i <= tmp; i+++ )
    a = n/(i + 1) + 1
    b = n/i
    ans += i * (b + a) * (b - a + 1) / 2