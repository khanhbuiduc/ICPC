--------------------------------------------------------------
|     | cow |     |     |     | cow | cow | cow | cow |
-----------------------------------------------------------------
|     | cow | cow | cow |     |     |     |     |     |
-------------------------------------------------------------

bãi cỏ: area: 2*B (B<=15'000'000)
N con bò, k cái chuồng

cho k chuồng: tính diện tích nhỏ nhất để phủ hết n con bò

-----
nhận xét: 

gọi f[i][j][state] là tổng số ô tối thiểu để phủ i con bò sử dụng j chuồng và chuồng j ở trạng thái state
    state = 0: bò i trong chuồng có độ rộng là 1
    state = 1: bò i trong chuồng có độ rộng là 2
    state = 2: bò thứ i trong chuồng có độ rộng là 1 và hàng còn lại có chuồng có độ rộng 1  kéo dài đến cột thứ i
đáp án: 
    min(f[N][k][state]) với state = 1->3
bài toán cơ sở: 
    F[1][1][0]=1; 
    F[1][1][1] = 2
    F[1][2][2] = 2
    f[i][j][state] còn lại bằnh inf;

/// thiếu 1 trường hợp:(dễ thiếu)
    vd: ở ví dụ trên 5 con bò trên và 3 con bò dưới
--------------------------------------------------------------
|     |     | cow | cow | cow |     | cow | cow | cow |
-----------------------------------------------------------------
|     | cow | cow | cow |     |     |     |     |     |
-------------------------------------------------------------
công thức QHD: 
F[I][J][state] != inf; xét bò thứ i+1
    tách riêng chuồng mới cho con bò i+1:
        state = 0: F[i+1][j+1][0] = min(F[i+1][j+1][0], F[i][j][state] + 1) với state: 0->2
        state =1: F[i+1][j+1][1] = min(F[i+1][j+1][1], F[i][j][state] + 2) với state: 0->2
    tách riêng chuồng mới cho con bò i+1 và dòng còn lại cũng thêm chuồng mới độ
        state =2: F[i+1][j+2][2] = min(F[i+1][j+2][2], F[i][j][state] + 2) với state 0->2
    
    chung chuồng với bò cũ
    state = 0
        nếu a[i].x==a[i+1].x:
            F[i+1][j][0] = min(F[i+1][j][0],  F[i][j][0] + a[i+1].y- a[i].y);
            F[i+1][j+1][2] = min(F[i+1][j+1][2], F[i][j][0] + a[i+1].y- a[i].y +1)
        nếu a[i].x != a[i+1].x:
            F[i+1][j+1][2] = min(F[i+1][j+1][2], F[i][j][0] + (a[i+1].y- a[i].y)+1) (giống cái trên, bỏ 2 cái ngoài if)
    
    state = 1
         F[i+1][j][1] = min(F[i+1][j][1], F[i][j][1] + 2*(a[i+1].y - a[i].y))

    state = 2 
        F[i+1][j][0] = min(F[i+1][j][0],  F[i][j][2] + a[i+1].y- a[i].y);
        F[i+1][j][2] = min(F[i+1][j][2],  F[i][j][2] + 2*(a[i+1].y- a[i].y));
        F[i+1][j+1][2] = min(F[i+1][j+1][2],  F[i][j][2] + a[i+1].y- a[i].y + 1);
    

--------------------------------

Exam Cheating:

Ta có 2 bạn An và Bình là 2 bạn học rất giói. Ta cổ I câu trắc nghiệm, bạn Ân sẽ biết làn các câu a[1], a[2], ..... , a[na], bạn Bình sẽ biết làm các câu

b[1], b[2], ..... , b[nb]
Ta được ngõi ở giữa 2 bạn, và ta có thể xoay qua xoay lại để chếp bài các bạn. Biết rằng ta có tổi đa P lần chếp bài, và nỗi lần chép bài ta sẽ chép không quá
K cầu liên tục.

Hòi số điểm tổi đa tà có thể nhận được là bao nhiêu ?222?
n bài,p lần chép bài,k bài liên tục
------------------------------------------------------------------

Gọi f[1][1][kA][kB] là tổng số câu trắc nghiệm tối đa có thể chếp khi có i câu trắc nghiện ban đầu, tính đến thời điển hiện tại đã có j đợt chép bài, đồng thời
kA và kß tương ứng là số lượng câu chếp bài LIÊN TỰC mà ta đã chếp ở bạn An và bạn Bình

bài toán cơ sở:
    f[e][e][e][e] = e, 
    khởi tạo các f[1][j][kA][kB] = -1
đáp án bài toán:
    Max(f[n][P][kA][kB]) với kA: 0 -> K, kB: 0 -> K
Công thức QHD:
    khi ta có f[i][j][kA][kB] :=- 1
    Dặt nextkA và nextkB tưong ung là gia trị kA, kB nếu như câu i+1 không có thêm đợt chép bài mới
        nextkA = (kA=0||kA=k)? 0: kA + 1;
        nextkB = (kA=0||kA=k)? 0: kA + 1;
    hàm score sẽ tính điểm tại bài i+1;
    Tình huống 1: không có thêm đợt chép bài mới ở câu i+1
        f[i+1][j][nextA][nextB] = max(f[i+1][j][nextA][nextB], f[i][j][kA][kB] + score(i+1,nextA>0,nextB>0 ))
    Tình huống 2: mở đợt chép bài mới ở câu thứ i+1 của bạn AN
        f[i+1][j+1][1][nextB] = max(f[i+1][j+1][1][nextB], f[i][j][kA][kB] + score(i+1, true, nextB>0))
    Tình huống 3: mở đợt chép bài mới ở câu thứ i+1 của bạn Bình
        f[i+1][j+1][nextA][1] = max(f[i+1][j+1][nextA][1], f[i][j][kA][kB] + score(i+1, nextA>0, true))
    Tình huống 4: ta mở đợt chép bài ở câu thứ i+1 của An và bình
        f[i+1][j+2][1][1] = max(f[i+1][j+2][1][1], f[i][j][kA][kB] + score(i+1, true, true))
Độ phức tạp: O(N*P*K^2);  n,p<=1000; k<=50

----------------
cải tiến:
Nhận xét: số đợt chép bài chép để phủ 1 bạn là N/k+1
===> 2 bạn: 2* N/k+2

nếu P >= 2* N/k+2  thì điểm tối đa của An và bình
nếu P >= 2* N/k+2 thì Quy hoạch động

------------------------------------------------------------------
Alyona And Strings

Cho 2 chuoi S va T va mot con so k

Trong chuỗi S, ta hãy chọn ra k nhóm, mỗi nhóm gom một vai ký tự liên tục với nhau, tương tự với chuoi T sao cho:
Các nhóm tương ứng cua 2 chuoi S và T phai giong nhau va tổng so lượng ký tự cua cac nhom dược chon lon nhat co the.

k = 3

S = "a[abc]cba[baab][baab]c"
T = "[abc]b[baab]c[baab]"

1 <- N, M <= 1000
1 <= k <= 10

S = a[abc]c[b]
T = [abc]b[b]

f[6][5][2] = 4

gọi f[1][j][groups] là số lượng ký tự tối đa có thể có được khi có i ký tự đầu tiên của chuỗi S, j ký tự đầu tiên của chuỗi T và ta đã tạo được groups nhóm
bài toán cơ sở:

khoi tạo cac f[i][j][groups] = -1, f[0][0][0] = 0
đáp án bài toán: f[N][M][K]

công thức qh:

Khi ta co f[i][j][groups] != -1
    Ta bỏ qua ký tự thứ i+1: 
        f[i+1][j][groups] = max(f[i+1][j][groups], f[i][j][groups])

    Ta bỏ qua ký tự thứ j+1: 
        f[i][j+1][groups] = max(f[i][j+1][groups], f[i][j][groups])

    Nếu S[i+1] == T[j+1]:
        Ta có thể cho S[i+1] và T[j+1] vào nhóm tương ứng:
            f[i+1][j+1][groups+1] = max(f[i+1][j+1][groups+1], f[i][j][groups] +1)
        Nếu S[i] == T[j]
            ta có thể cho S[i+1] và T[j+1] vào chung nhóm mà S[i] và T[j] đang ở 
            f[i+1][j+1][groups] = max(f[i+1][j+1][groups], f[i][j][groups] +1)
====> cần biết liệu i,j có trong group không hay không

------------------------------------------
Gọi f[i][j][groups][state] là tổng số lượng ký tự lớn nhất khi co i ký tự đau tiên của chuỗi S, ký tự đau tiên của chuỗi T và số nhóm là groups, cùng trạng thái state:
    - state = 1: Ký tự S[i] và T[j] bằng nhau và chung cùng ở trong 1 nhom tương ứng.
    - state = 0: Trong những trường hợp còn lại.
bài toán cơ sở:
    - f[i][j][groups][state] = -1
    - f[0][0][0][0] = 0

đáp án bài toán: Max(f[N][M][K][0], f[N][M][K][1])

công thức qh:

Khi ta co f[i][j][groups] != -1
    Ta bỏ qua ký tự thứ i+1: 
        f[i+1][j][groups][0] = max(f[i+1][j][groups][0], f[i][j][groups][state])

    Ta bỏ qua ký tự thứ j+1: 
        f[i][j+1][groups][0] = max(f[i][j+1][groups][0], f[i][j][groups][state])

    Nếu S[i+1] == T[j+1]:
        Ta có thể cho S[i+1] và T[j+1] vào nhóm mới:
            f[i+1][j+1][groups+1][1] = max(f[i+1][j+1][groups+1][1], f[i][j][groups][state] +1)
        Nếu state = 1
            f[i+1][j+1][groups][1] = max(f[i+1][j][groups+1][1], f[i][j][groups][state] +1);

-------------------------------------------------------
