quy hoạch động là gì?
    - là một kỹ thuật giải bài toán dựa vào việc giải một hoặc nhiều bài toán nhỏ hơn có cùng tính chất với bài đó
--------------------------
    4 bước giải 1 bài toán quy hoạch động:
        - định nghĩa bài toán con và các số đi cùng
        - xét lời giải bài toán trong trường hợp nhỏ nhất
        - xác định đáp án bài toán ban đầu
        - xác định công thức truy hồi để tính bài toán hiện tại dựa trên bài toán nhỏ hơn(hãy giả sử bài toán con đc giải 1 cách chính xác và tối ưu rồi)
-------------------------
vd: tính fibonancy:
    ngây thơ: gọi hàm fibo(n) tính fibonacy
        biên:   n=0=> fibo(0)=0
                n==1=>fibo(1)=1
        kết quả: fibo(n)
        giải: fibo(n)= fibo(n-1)+fibo(n-2)
    độ phức tạp 2^n
    cải tiếng áp dụng quy hoạch động:
        đặt dãy F[]: F[i] lưu trữ giá trị fibonancy thứ i 
    O(n)


-----------------------------------------------------------------------------------------------------------------------------------
frog 1
gọi f[i] là chi phí nhỏ nhất để nhảy từ ô 1 đến ô i
bài toán cơ sơ: f[1]=0;f[2]=|h[2]-h[1]|
đáp án bài toán:  f[n]
công thức quy hoạch động: 
nếu trc đó ở ô i-1: f[i] = f[i - 1] + |h[i] - h[i - 1]|
nêú trc đó ở ô i-2: f[i] = f[i - 2] + |h[i]- h[i-2]| 
=> f[i] = min[bắt đầu ở ô i-1,bắt đầu ở i-2]

-------------------------------------------------------------------------------------------------------------------------------------
longest common subsequence

cho 2 chuỗi a,b

định nghĩa chuỗi con của chuỗi s là chuỗi đc tạo thành khi xóa 1 vài ký tự trong chuỗi s

ví dụ: s="abcce" chuỗi con của s là "ac","ce",...

đặt dãy f[i][j] là độ dài chuỗi con chung lớn nhất khi có ký tự i ở đầu tiên của chuỗi a và j ký tự đầu tiên của chuỗi b
bài toán cơ sở: f[i][0]=f[0][j]=0
đáp án bài toán: F[n][m]: n,m lần lượt là length của a,b
công thức truy hồi:
    -xét: f[i][j]:
        - nếu a[i]==b[j] thì f[i][j] = f[i - 1][j - 1] + 1
        - nếu  a[i]!=b[j] thì f[i][j] = max(f[i][j-1],f[i-1][j])
bài này chú ý dùng getline(cin,a) mới access đc vì dòng có thể chứa " "
----------------------------------------------------------------------------------------------------------------------------------------
longest increase subsequence
cho 1 dãy số nguyên a gồm n số, hãy tìm 1 dãy số b là dãy con của dãy a sao cho các phần tử của dãy b là phần tử tăng dần và có độ dài lớn nhất.
một dãy con của dãy a là dãy số được tạo lên bằng việc xóa đi một vài phần tử trong dãy số a

n=10
0 5 1 9 2 2 4 6 3 7 3

====>0 1 2 4 6 7
===>5
1 4
1 2 4
2 4
f[6] = 3
f[9] = f[8] + 1, f[7] +1,... với pt cuối của (f[9]<f[7])
dãy f[i] là dãy dài nhất tới thời điểm chọn số a[i] là phần tử cuối của dãy. 

bài toán cơ sở: f[0] = 0;

đáp án bài toán max[f[i]] với mọi i: 1 ->n

f[i] = ??

f[i] = max(f[j] + 1) với j: 0 -> i - 1, a[j] < a[i]


--------------------------------------------------------------------------------------------------------------------------------------------
Knapsack

một ngôi nhà có n đồ vật. đồ vật thứ i có giá trị ci và tải trọng w[i]
1 người ăn trộm cái túi với tải trọng M vào và ăn cắp đồ vật
hỏi ăn trộm lấy đc max value là bao nhiêu để weight<=M

N=6 W=10
4 3
7 2
1 1
3 9
6 10
8 12

f[4][5]=10

Gọi f[i][j] la tổng tien lon nhat khi bưoc vao ngoi nha co i đo vat va cai tui co tai trọng j
bài toan co so: f[0][j] - 0, f[i][0] - 0

đáp án bài toán: f[N][W]

công thức qha:

. Tinh huong 1: Do vat thu i KHONG THE bo vao tui (w[i] > j): f[i][j] - f[i - 1][j]
. Tình huống 2: Đô vật thứ i có thể bỏ vào túi (w[i] <- j)
	+ ta không bỏ đô vật i vào túi: f[i][j] = f[i - 1][j]
	+ ta bỏ đồ vật i vào túi: f[i][j] = f[i - 1][j - w[i]] + c[i]
	f[i][j] = max(f[i - 1][j], f[i - 1][j - w[i]] + c[i])

----------------------------------------------------
Edit distance:

Cho 2 chuỗi s1 và s2. Ta có 3 phép biền đổi và ta chỉ biên đổi chuỗi s1.

Mỗi phép biến đổi là 1 trong 3 dạng sau:

Delete: lựa chọn 1 ký tự bat kỳ và xóa no
Insert c: Lựa chọn 1 vị trí bất kỳ và thêm ký tự c vao
Replace: Lựa 1 vị trí bat kỳ trong chuỗi s1 và thay đổi ký tự đó thành 1 ký tự khác

Hòi: Thực hiện tối thiểu bao nhiêu phép biến đổi để chuỗi s1 trở thành chuỗi s2.

Ví dụ:

s1 = ABBC
s2 = CDC

ABBC ---- > CBBC ---- > CBC ----- > CDC

s1 - AB
s2 - C

f[2][1] = 2

gọi f[i][j] là số phép biến đổi ít nhất để i ký tự đầu tiên của chuỗi s1 thành j ký tự đầu tiên của chuỗi s2

bài toán cơ sở: f[i][0] =i , f[0][j] = j 

đáp án bài toán: f[s1.length][s2.length]

case 1: s1[i] == s2[j]: 
    f[i][j] = f[i - 1][j - 1]

case 2: s1[i] != s2[j]
    + Biến đổi i - 1 ký tự của s1 thành j ký tự của s2, sau đó dùng 1 phép Delete để xóa ký tự thứ i:
        f[i][j] = f[i - 1][j] +1

    + Biến đổi i ký tự của s1 thành j - 1 ký tự của s2, sau đó dùng 1 phép Insert để thêm ký tự:
        f[i][j] =f[i][j -1] +1

    + Biến đổi i - 1 ký tự của s1 thành j - 1 ký tự của s2, sau đó dùng 1 phép Replace để thay đổi ký tự đó:
        f[i][j] =f[i - 1][j-1] +1
    
    tổng hợp:
        f[i][j] = min(f[i - 1][j] +1, f[i][j + 1] +1,  f[i - 1][j - 1] +1| )

---------------------------------------




