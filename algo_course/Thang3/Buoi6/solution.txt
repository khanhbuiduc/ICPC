Knapsack 2:

N = 5
3 6
10 8
3 2
2 1
2 1

Nhận xét: W rất lớn(W <= 10^9), tuy nhiên v[i] <= 1000

tổng tiền <= 100'000

Gọi f[i][j] là tổng khối lượng nhỏ nhất khi ta xét i đồ vật ban đầu và tổng số tiền là j
bài toán cơ sở: 
    f[0][0] = 0;
    f[i][j] = -INF;
đáp án: j lớn nhất sao cho f[n][j] <= w

QHD:
    Khi ta có f[i][j] != inf
    Xét đồ vật thứ i+1:
        - case1: không thêm i + 1 vào  túi:
            f[i+1][j] = min(f[i+1][j], f[i][j]) 
        - case2: thêm i + 1 vào  túi: (f[i][j] +  w[i+1] <= W)
            f[i+1][j + c[i+1]] = min(f[i+1][j + c[i+1]], f[i][j],f[i][j] +  w[i+1])


---------------------------
longest increasing subsequence

Cho mot day so nguyen a co N so. Hay tim 1 day con gom cac so trong day a sao cho cac so tang dan va do dai cua day lon nhat co the.

Ban dễ: 1 <= n <= 1000
bản khó: 1<= n <= 100'000
cách thường: dãy f[i] là dãy dài nhất tới thời điểm chọn số a[i] là phần tử cuối của dãy. 

 với i phần tử gọi f[len] là CHỈ SỐ của phần tử có giá trị nhỏ nhất trong tất cả các dãy con tăng có độ dài là len
5 1 9 2 4 3 6 7 7 8 10 2 12
i = 5
    F[1] = 2
    F[2] = 4
    F[3] = 5

i = 6
    f[1] = 2
    f[2] = 4
    f[3] = 6

i = 7
    f[1] = 2
    f[2] = 4
    f[3] = 6
    f[4] = 7

Bài toán cơ sở: thêm 0 vào đầu dãy:
    - f[0] = 0
    - maxlength = 0
đáp án: maxlength
QHD: 
    khi ta đi từ i-> i+1 (bổ xung thêm 1 phần tử tại a[i+1])
    Tình huống 1: nếu a[i+1] là một số làm cho dãy có độ dài tăng lên (a[F[maxlength]] < a[i+1]):
        maxlength + 1;
        F[maxlength] = i + 1;
    Tình huống 2: a[i+1] không làm tăng maxlength (a[f[maxLength]] >= a[i+1]): 
        duyệt len lớn nhất có thể sao cho: a[f[leng]] < a[i+1]: a[i+1] sẽ ở trong dãy số có độ dài len + 1
nhận xét:
         - khi len càng lớn a[F[leng]] càng lớn:
                => sử dụng binary search sao cho a[f[leng]] < a[i+1]
                a[i+1] là số cuối cùng trong dãy con tăng có độ dài len + 1
                    khi a[F[len + 1]] > a[i + 1]: F[len + 1] = i + 1
độ phức tạp: O(Nlog(N));

-----------------------------------------
SC1 (Summer Contest 2022)

Ta có a[1] tờ mệnh giá 1000, a[2] tờ mệnh giá 2000, ..... , a[9] tờ mệnh gia 500000

Ta se quyet định ra tiệm tra sua de mua 1 ly tra sua co gia C dồng

Cửa hàng trà sữa sẽ có b[1] tờ 1000, b[2] tờ 2000, ..... , b[9] tờ 500000

Nếu ta trả với số tiền X đồng thì tiệm trà sữa phải thoi tien (X - C) đồng

Ta se muon co it to tien nhat co the. Va tiem tra sua muon co nhieu to tien nhat thi tiem tra sua se co gang thoi tien sao cho cang day di it to tien cang tot.

Hay tinh ta co thể co toi thieu bao nhieu to tien sau thương vụ mua tra sữa hoặc tra ra ket qua là SORRY !!!!!!! (không thực hiện được thương v)
-----------------------------------------------------
Trước het, vì C chia het cho 1000

Ta có thể chia C cho 1000, và xem như ta có các tờ tiền mệnh gia 1 đồng, 2 đồng, 5 đồng, 10 đồng , .....

Vì ta muốn sở hữu ít to tiền nhat co the > khi ta mua tra sua, ta phai day di nhieu to nhat co the.

5 tờ 1 đồng
2 tờ 2 đồng
0 tờ 5 đồng

5 tờ 1 đồng: 5 tờ
2 tờ 2 đồng + 1 tờ 1 đồng: 3 tờ
1 tờ 2 đồng + 3 tờ 1 đồng: 4 tờ

gọi f_max[i][j] là số tờ tiền tối đã khi có i mệnh giá ban đầu và tổng tiền j
bài toán cơ sở:
    - f_max[0][0] = 0
    - f_max[i][j] = -1
Công thức quy hoạch động
khi f_max[i][j] != -1
     xét mệnh giá thú i+1 có ai tờ tiền
        người mua sử dụng x tờ: x: 0 -> a[i+1]
            i -> i + 1
            j -> j + x * c[i + 1];
            f_max[i + 1][j + x * c[i + 1]] = MAX(f_max[i + 1][j + x * c[i + 1]], f_max[i][j] + x);
-----------------
người bán đẩy đi ít tiền nhất có thể
    f_min[i][j] là tổng tiền tối thiểu khi có i mệnh giá đầu tiên và tổng tiền = j

Bài toán cơ sở:
    - f_min[0][0] = 0
    - f_min[i][j] = inf
Công thức quy hoạch động:
Công thức quy hoạch động:

khi f_min[i][j] != inf
    xét mệnh giá i+1 có bi tờ tiền
        người bán sử dụng x tờ: x: 0 -> B[i+1]
            i -> i + 1
            j -> j + x * c[i + 1];
            f_min[i + 1][j + x * c[i + 1]] = min(f_min[i + 1][j + x * c[i + 1]], f_min[i][j] + x);
-----------------
tổng số tờ: sum=a[1]->a[9]
trả tiề cho ly trà sữa x đồng, người bán hàng trả lại X-C đồng
nếu f_max[9][X] != -1 và f_min[9][X - C] != inf
    số tiền trong túi
        sum = min(sum - f_max[9][X] - f_min[9][X])

-------------------------------------------
SPC4 (Spring Contest 2022)

Bún và Đậu là 2 thợ cắt tóc.

Có N vị khách, thời gian để Bun phục vụ vị khách thứ i là b[i], thời gian để Đậu phục vụ vị khách thứ i là d[i]

Ta se de mot vai vị khach cho Bun phuc vụ, nhung vi khach con lai se cho Đau phuc vụ.

Thoi gian tiem cat toc dong cua se la thoi gian ma Bun va Dau ket thuc

Hỏi: Thời gian tiệm cắt tóc đồng cửa sớm nhất là bao nhiêu ???????? 

---------------------
Nhận xét: 

1 <= N <= 100
1 <= b[i], d[i] <= 100

thời gian 1 người phục vụ lớn nhất là 10^4

Giả sử ta cố định thời gian bún phục vụ khác là t, ta tính toán f(t) là tổng thời gian tối thiểu để Đậu phục vụ những vị khách còn lại.

===> thời gian tiệm đóng cửa: max(t,f(t));

gọi f[i][t] là tổng thời gian Đậu phục vụ ít nhất khi thời gian bún phục vụ là t và ta có i vị khách đầu tiên

bài toán cơ sở:
    f[0][0] = 0; f[i][j] = inf;
kết quả: min( max(t,f[n][t]) ) : t: 1->10^4
QDH:
    khi f[i][t] != inf
    Nếu Bún phục vụ khách thứ i + 1:
        f[i+1][t + B[i+1]] = min(f[i][t + B[i+1]], f[i][t])
    Nếu Đậu phục vụ khách thứ i+1
        f[i+1][t] = min(f[i+1][t], f[i][t] + D[i+1] )
    thời gian tiệm đóng cửa là max(t,f[n][t]): t: 1->10^4
