        f[i+1][j][1] = max(f[i+1][j][1], f[i][j][state] +p[i+1]-p[i] )
--------------------------
Maximum Monogonosity
Cho 2 dãy số a và b gồm N số nguyên. Cho một số nguyên dương K
Nếu ta chọn 1 đoạn [l..r] thì giá trị sẽ được cộng 1 lượng là |bl-ar|+ |br-al|
Các đoạn ta chọn không được phép phủ lên nhau và tổng số lượng phần tử = K
Hỏi tổng giá trị lớn nhất có thể tạo ra là bao nhiêu ????????
7 2
1 3 7 6 4 7 2
1 5 3 2 7 4 5
Đoạn [3..3] và [4..4]
Đoạn [3..3] có chi phí: |3 - 7| + |3 - 7| - 8
Đoạn [4..4] có chi phí: |2 - 6| + |2 - 6| = 8
Đoạn [3..4] có chi phí: 16

-------
nhận xét: |x-y| = x - y nếu x >= y và y - x nếu x < y

Cho 2 dãy x và y cũng có N số
Hãy xác định tổng |x1 - y1| + |x2 - y2| + |xN - yN| lớn nhất.

Gọi f[i] là tổng |x1 - y1| + |x2 - y2| + |xi - yi| lớn nhất

f[i+1] = f[i] + max(xi+1 - yi+1, yi+1 - xi+1)

giả sử đoạn [l .. r] có chi phí là 
    |b[r+1] -a[l]| + |b[l] -a[r +1]|

sau khi phá trị tuyệt đối sẽ có dạng:
    (b[r+1] - a[l]) + (b[r] + a[r+1])
    ...
Đoạn [L .. i] nếu được tính một cách tương tự khi phá trị tuyệt đối như đoạn [L .. i+1] thì chúng được biểu diễn như sau:
    (b[i] - a[l]) + (b[l] - a[i])
    (b[i+1] - a[l]) + (b[l] - a[i+1]) = (b[i] - a[l]) + (b[l] - a[i]) - b[i] + b[i+1] + a[i] - a[i+1]

|b[i] - a[l]| + |b[l] - a[i]|

bi - al + bl - ai
bi - al + ai - bl
al - bi + bl - ai
al - bi + ai - bl

7 2
1 3 7 6 4 7 2
1 5 3 2 7 4 5

f[4][2][1][1] = -5+(-3) =- 8

Gọi f[i][j][state] là tổng giá trị lớn nhất khi có i phần từ, tổng số lượng phần từ đã được chọn là j, và trạng thái state
    state = 0: phần tử thứ i đang không được chọn
    state = 1: giá trị đang được tính dựa trên bi - al + bl - ai
    state = 2: giá trị đang được tính dựa trên bi - al + ai - bl
    state = 3: giá trị đang được tính dựa trên al - bi + bl - ai
    state - 4: giá trị đang được tính dựa trên al - bi + ai - bl

bai toan co so: 
    f[0][0][0] = 0, khoi tao cac f[i][j][state] = -inf

đáp an bài toan: 
    f[n][k][state] voi state: 0 -> 4

công thức qhđ:
    khi ta co f[i][j][state] != -inf
    Ta không chọn phần tử thứ i + 1 vào đoạn thẳng:
        f[i + 1][j][0] = max(f[i + 1][j][0], f[i][j][state])
    Phần tử thứ i + 1 được vào đoạn thắng mới
        f[i+1][j+1][1]= max(f[i+1][j+1][1], f[i][j][state] + b[i+1] - a[i+1] +b[1+1] - a[1+1])
        f[i+1][j+1][2] - max(f[i+1][j+1][2], f[i][j][state] + b[i+1] - a[i+1] + a[i+1] - b[1+1])
        f[i+1][j+1][3] = max(f[i+1][j+1][3], f[i][j][state] + a[i+1] - b[i+1] + b[1+1] - a[1+1])
        f[i+1][j+1][4] - max(f[i+1][j+1][4], f[i][j][state] + a[i+1] - b[i+1] + a[i+1] - b[1+1])
    Phần tử thứ i + 1 vẫn ở trong đoạn thang cu (state !- 0)
        neu state = 1: f[i+1][j+1][1] - max(f[i+1][j+1][1], f[i][j][state] - b[i] + b[i+ 1] + a[i] - a[i + 1])
        neu state = 2: f[i+1][j+1][2] - max(f[i+1][j+1][2], f[i][j][state] - b[i] + b[i + 1] - a[i] + a[i + 1])
        neu state = 3: f[i+1][j+1][3] - max(f[i+1][j+1][3], f[i][j][state] + b[i] - b[i + 1] + a[i] - a[i + 1])
        neu state = 4: f[i+1][j+1][4] - max(f[i+1][j+1][4], f[i][j][state] + b[i] - b[i + 1] - a[i] + a[i + 1])
----------------------------
K miners

hãy thiết kế hàm để tính lượng than sinh ra khi có 3 món kề nhau là (a,b,c) (a,b,c: 0->3)

calc(a, b, c):
    dặt ret = 0
    něu a == 1 | | b == 1 || c == 1: ret++
    něu a == 2 || b == 2 || c == 2: ret++
    něu a == 3 || b == 3 || c == 3: ret++
return ret

Gọi f[1][a][b][c][d] là tổng lượng than lớn nhất khi có i đợt vận chuyển, 2 món cuối cùng trong mỏ 1 lần lượt là a và b, 2 món cuoi cùng trong mo 2 lần lượt là c
và d.

bài toan con: 
    f[e][e][e][e][0] = 0, khoi tạo cac f[i][a][b][c][d] == -1
đáp án bài toan: 
    max(f[n][a][b][c][d]) voi a,b,c,d: 0 -> 3

QHD: khi ta có: f[i][a][b][c][d] != -1
xét: đợt vận chuyển thứ i + 1,
    gọi là shipment[i+1]
    tình huống 1: shipment[i+1] vào mở:
        i->i+1
        a->b
        b->shipment[i+1]
        c->c
        d->d
        f[i+1][b][shipment[i+1]][c][d] = max(f[i+1][b][shipment[i+1]][c][d], f[i][a][b][c][d] +calu(a,b,shipment[i+1]) )
    tình huống 2: shipment[i+1] vào mở 2:
        i->i+1
        a->a
        b->b
        c->d
        d->shipment[i+1];
    f[i+1][a][b][d][shipment[i+1]] = max(f[i+1][a][b][d][shipment[i+1]], f[i][a][b][c][d] +calu(c,d,shipment[i+1]) )
Độ phức tạp: O(N* 4^4) = O(256 * N);

-------------------
spoj quá time:

khi có i đợt vận chuyển ta có shipment[i] sẽ là món cuối mỏ 1 hoặc 2: khi đó b hoặc d sẽ là shipment[i]

gọi f[i][a][b][c] là tổng lượng than lớn nhất khi có i đợt vận chuyển, món liền trc của shipment[i] là a,  

ta có bài toán cơ sở:   
    f[0][0][0][0] = 0;
    f[i][a][b][c] = - inf
đáp án bài toán: 
    f[n][a][b][c] với a,b,c từ 0->3
công thức QHD:
    khi f[i][a][b][c] != -1;
    case1: shipment[i+1] cùng mỏ shipment[i]
        i->i+1
        a->shipment[i];
        b->b
        c->c
        =>f[i+1][shipment[i]][b][c] = max(f[i+1][shipment[i]][b][c],f[i][a][b][c] + cacul(a,shipment[i], shipment[i+1]))
    case2: shipment[i+1] khác mỏ shipment[i]
        i-> i+1
        a->c;
        b->a;
        c->shipment[i];
        f[i+1][c][a][shipment[i]] = max(f[i+1][c][a][shipment[i]], f[i][a][b][c] + cacul(b,c,shipment[i+1]));
===> O(4^3 * n)

------------------------------------

Kinh nghiệm( Olimpic 30/4 2019)

An và Bình sẽ cùng đi trên một báng N hàng M cột. Ô hàng i cột j của bảng có nột cây nấm có nức năng lượng là c[i][j]. An và Bình sẽ di chuyển theo kiểu hoặc đi

sang phải, hoặc đi xuống dưới và 2 anh em sẽ cùng nhau gặp nhau tại ô (N, M).
Trên đường đi, 2 anh em sẽ hái nấm tại các ô mà mình đi qua. Biết rằng 2 anh em sẽ chỉ muốn gặp nhau tại nơi bắt đầu và nơi kết thúc.

Ban đầu 2 anh em xuất phát tại ô (1, 1) 

giới hạn: 1<N<M<200

--------------
nhận xét: 
    - ae chỉ đi sang và xuống từ (1,1) -> (N,M)
        đi sang N-1 lần, đi xuống M-1 lần: tổng: N+M-2
    - cần lưu: f(xi,yi),(xj,yj) trong QHD: 4 chiều O(200^4)=O(1'600'000'000)
        - cải thiện: có số bước, hàng thì sẽ tính đc cột: 
            x + y - 2 = step => y = step + 2 - x  
        --> f[step][xi][xj]
    - xi>xj khi cùng step:

gọi: f[step][xA][xB] là số lượng nấm lớn nhất mà 2 ae an và bình thu thập đc sau step bước. An đang ở hàng xA và bình đang đứng ở hàng xB

bài toán cơ sở: 
    f[0][1][1] = 0; các f[step][xA][xB] = -1 với mọi xA,xB
đáp án bài toán: 
    f[N+M-2][n][m]
công thức quy hoạch động:
    khi f[step][xA][xB] != -1
    yA = step + 2 - (xA) và yB = step + 2 - (xB)
    case1: An sang phải(yA + 1 <= M && xA < xB):
        + bình sang phải (yB + 1<=M):
            f[step+1][xA][xB] = max(f[step+1][xA][xB], f[step][xA][xB] + a[xA][yA+1]+ a[xB][yB+1])
        + bình xuống dưới (xB + 1<= N):
            f[step+1][xA][xB+1] = max(f[step+1][xA][xB+1], f[step][xA][xB] + a[xA][yA+1]+ a[xB+1][yB])
    case2: An xuống dưới(xA+1<=N)
        + bình sang phải (yB+1<=M && (xA+1 < xB || step = N + M -3)):
            f[step+1][xA+1][xB] = max(f[step+1][xA+1][xB], f[step][xA][xB] + a[xA+1][yA]+ a[xB][yB+1])
        + bình xuống dưới (xB+1<= N && xA<xB):
            f[step+1][xA+1][xB+1] = max(f[step+1][xA+1][xB+1], f[step][xA][xB] + a[xA+1][yA]+ a[xB+1][yB])

